input { 
  file { 
    path => "/usr/share/var/log/syslog"
    type => "syslog"
  }
  beats {
    port => 5044
    type => "filebeat"
  }
  file { 
    path => "/usr/share/var/log/auth.log"
    type => "auth"
  } 
}

filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:system.log.timestamp} %{SYSLOGHOST:system.log.hostname} %{DATA:system.log.program}(?:\[%{POSINT:system.log.pid}\])?: %{GREEDYDATA:system.log.message}" }
      match => { "message" => "%{SYSLOGTIMESTAMP:system.log.timestamp} %{GREEDYDATA:system.log.message}" }
      add_field => [ "system.log.received_at", "%{@timestamp}" ]
      add_field => [ "system.log.received_from", "%{host}" ]
    }
    date {
      match => [ "system.log.timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  if [type] == "auth" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} %{DATA:system.auth.service}(?:\[%{POSINT:system.auth.pid}\])?: %{DATA:system.auth.ssh.event} %{DATA:system.auth.ssh.method} for ?%{DATA:system.auth.user} from %{IPORHOST:system.auth.ip} port %{NUMBER:system.auth.port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?" }
      match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{DATA:system.auth.ssh.event} %{DATA:system.auth.ssh.method} for invalid user ?%{DATA:system.auth.user} from %{IPORHOST:system.auth.ip} port %{NUMBER:system.auth.port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?" }
      match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} %{DATA:system.auth.program}(?:\[%{POSINT:system.auth.pid}\])?: pam_unix\(sshd:session\): %{DATA:system.auth.event} for user %{DATA:system.auth.user} by \(%{DATA:system.auth.uid}\)" }
      match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} %{DATA:system.auth.program}(?:\[%{POSINT:system.auth.pid}\])?: %{GREEDYDATA:system.auth.message}" }
      match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} %{GREEDYDATA:system.auth.message}" }
      match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{GREEDYDATA:system.auth.message}" }
      add_field => [ "system.auth.received_at", "%{@timestamp}" ]
      add_field => [ "system.auth.received_from", "%{host}" ]
    }
    date {
      match => [ "system.auth.timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}
output {
  if [@metadata][pipeline] {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      manage_template => false
      index => "%{[@metadata][beat]}-%{[@metadata][version]}" 
      action => "create" 
      pipeline => "%{[@metadata][pipeline]}" 
      ssl => true
      cacert => '/usr/share/logstash/config/certs/ca/ca.crt'
      user => elastic
      password => ''
    }
  }  
  else {
    elasticsearch { 
      hosts => ["https://elasticsearch:9200"]
      ssl => true
      cacert => '/usr/share/logstash/config/certs/ca/ca.crt'
      user => elastic
      password => ''
    }
  }
}
